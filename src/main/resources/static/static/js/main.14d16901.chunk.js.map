{"version":3,"sources":["compoments/ChatGPT/chatgpt.png","compoments/ChatGPT/user.png","compoments/ChatGPT/heike.gif","compoments/ChatGPT/qiu.gif","compoments/ChatGPT/jushou.gif","compoments/ChatGPT/index.jsx","compoments/Admin/People.js","compoments/Admin/index.js","compoments/AutoCode/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","them","dark","vscDarkPlus","light","coyWithoutShadows","App1","useState","comments","setComments","question","setQuestion","list_container_id","useRef","currentTexts","count","setCount","postStreamList","callback","a","requestList","map","item","type","contents","push","hiddenQuestion","hiddenContent","name","text","requestOptions","method","headers","body","JSON","stringify","model","message","fetch","streamResponse","reader","getReader","read","then","done","value","console","log","strArr","TextDecoder","decode","split","i","length","json","parse","choices","delta","content","addComment","e","trim","alert","index","id","Math","random","role","setTimeout","getList","responseList","Promise","resolve","axios","post","response","Array","isArray","data","arr","catch","error","scrollBottom","current","scrollTop","scrollHeight","addStreamComment","useCallback","str","useEffect","className","style","flex","src","chatgpt","ref","el","color","key","user","marginLeft","marginBottom","width","textContent","language","darkMode","display","justifyContent","backgroundColor","heike","placeholder","onChange","target","onClick","test","React","memo","dataList","updateScroll","list","isALL","setIsAll","innerAllText","calculatedFigures","position","OmsSyntaxHighlight","props","darcula","SyntaxHighlighter","registerLanguage","jsx","javascript","source","escapeHtml","People","age","gender","hometown","occupation","getMemory","result","action","match","gptOrder","methods","this","addPerson","person","findIndex","p","toLowerCase","splice","filter","attr","Search","Input","TextArea","App","people","useMessage","messageApi","contextHolder","actionType","setActionType","textAreaValue","setTextAreaValue","open","setOpen","setList","initialValues","setInitialValues","onFinish","values","updatePerson","columns","title","dataIndex","render","_","record","size","removePerson","padding","marginRight","onSearch","findPerson","duration","toChatGPT","marginTop","dataSource","onClose","placement","labelCol","span","wrapperCol","maxWidth","autoComplete","Item","label","disabled","offset","htmlType","getTable","programString","cmdRequest","filename","substring","index1","indexOf","index2","lastIndexOf","code","replace","Compoment","params","url","window","location","href","theRequest","strs","decodeURI","getParams","admin","auto","AutoCode","setPage","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.14d16901.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chatgpt.80b1a7cf.png\";","module.exports = __webpack_public_path__ + \"static/media/user.12f71825.png\";","module.exports = __webpack_public_path__ + \"static/media/heike.729fd49e.gif\";","module.exports = __webpack_public_path__ + \"static/media/qiu.5b7b93a2.gif\";","module.exports = __webpack_public_path__ + \"static/media/jushou.a8ebfd24.gif\";","\r\nimport React, { useContext, useState, useCallback, useRef } from 'react';\r\nimport './index.css';\r\nimport chatgpt from './chatgpt.png';\r\nimport user from './user.png';\r\nimport heike from './heike.gif';\r\nimport qiu from './qiu.gif';\r\nimport jushou from './jushou.gif';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport { vscDarkPlus, coyWithoutShadows, darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n// 设置高亮的语言\r\nimport { jsx, javascript, sass, scss } from \"react-syntax-highlighter/dist/esm/languages/prism\";\r\nimport ReactMarkdown from 'react-markdown';\r\nconst them = {\r\n  dark: vscDarkPlus,\r\n  light: coyWithoutShadows\r\n};\r\nconst ENDTEXT = \"__END__\";\r\nexport default function App1() {\r\n  const [comments, setComments] = useState([]);\r\n  const [question, setQuestion] = useState(\"\");\r\n  const list_container_id = useRef(null);\r\n  const currentTexts = useRef(\"\");\r\n  const [count, setCount] = useState(0);\r\n\r\n\r\n  const postStreamList = async (callback) => {\r\n    let requestList = [];\r\n    comments.map((item) => {\r\n      if (item.type === \"chatgpt-url\") {\r\n        if (item.contents[0]) {\r\n          requestList.push({ \"role\": \"user\", \"content\": item.contents[0].hiddenQuestion });\r\n          requestList.push({ \"role\": \"assistant\", \"content\": item.contents[0].hiddenContent });\r\n        }\r\n      } else {\r\n        requestList.push({ \"role\": \"user\", \"content\": item.name });\r\n        if (item.contents[0] && item.contents[0].text) {\r\n          requestList.push({ \"role\": \"assistant\", \"content\": item.contents[0].text });\r\n        }\r\n      }\r\n    })\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"GPT3.5\",\r\n        message: requestList,\r\n      })\r\n    };\r\n    const streamResponse = await fetch('/search/api/stream', requestOptions);\r\n    const reader = streamResponse.body.getReader();\r\n    const read = () => {\r\n      return reader.read().then(({ done, value }) => {\r\n        if (done) {\r\n          console.log(\"victor react reviced: end\");\r\n          callback(ENDTEXT);\r\n          return;\r\n        }\r\n        const textDecoder = new TextDecoder();\r\n        let text = \"\";\r\n        const strArr = textDecoder.decode(value).split(\"data: \")\r\n        if (strArr) {\r\n          for (let i = 0; i < strArr.length; i++) {\r\n            if (strArr[i] && strArr[i] !== \"[DONE]\") {\r\n              let json = JSON.parse(strArr[i]);\r\n              if (json.choices.length && json.choices[0].delta.content) {\r\n                text = text + json.choices[0].delta.content;\r\n              }\r\n            }\r\n          }\r\n          callback(text);\r\n        }\r\n        // console.log('victor react reviced: ', );\r\n\r\n        return read();\r\n      });\r\n    }\r\n\r\n    read();\r\n  }\r\n\r\n\r\n  const addComment = async (e) => {\r\n    if (question.trim() === '') {\r\n      alert('请输入问题');\r\n      return;\r\n    }\r\n    setQuestion('');\r\n    let index = comments.length;\r\n    comments.push({\r\n      id: Math.random(),\r\n      role: 'user',\r\n      type: \"chatgpt\",\r\n      name: question,\r\n      contents: []\r\n    });\r\n    setComments(comments);\r\n    setCount(count + 1);\r\n    setTimeout(async () => {\r\n      let responseList = await getList();\r\n      if (responseList[0].type === \"chatgpt-url\") {\r\n        comments[index].type = \"chatgpt-url\";\r\n      }\r\n      comments[index].contents = responseList;\r\n      setComments(comments);\r\n      setQuestion('');\r\n      setCount(0);\r\n    }, 0);\r\n  }\r\n\r\n  const getList = (question) => {\r\n    let requestList = [];\r\n    comments.map((item) => {\r\n      if (item.type === \"chatgpt-url\") {\r\n        if (item.contents[0]) {\r\n          requestList.push({ \"role\": \"user\", \"content\": item.contents[0].hiddenQuestion });\r\n          requestList.push({ \"role\": \"assistant\", \"content\": item.contents[0].hiddenContent });\r\n        }\r\n      } else {\r\n        requestList.push({ \"role\": \"user\", \"content\": item.name });\r\n        if (item.contents[0]) {\r\n          requestList.push({ \"role\": \"assistant\", \"content\": item.contents[0].text });\r\n        }\r\n      }\r\n    })\r\n    return new Promise((resolve) => {\r\n      axios.post('/search/send', {\r\n        model: \"GPT3.5\",\r\n        message: requestList,\r\n      }).then((response) => {\r\n\r\n        if (Array.isArray(response.data.choices)) {\r\n          console.log('请求成功', response);\r\n          let arr = response.data.choices.map((item) => {\r\n            if (item.message.type === \"chatgpt-url\") {\r\n              return {\r\n                type: item.message.type,\r\n                index: item.index,\r\n                text: \"我已经对这个链接学习完成，你可以向我提问关于这个链接的内容\",\r\n                hiddenQuestion: item.message.question,\r\n                hiddenContent: item.message.content\r\n              }\r\n            } else {\r\n              return {\r\n                type: item.type,\r\n                index: item.index,\r\n                text: item.message.content\r\n              }\r\n            }\r\n          })\r\n          resolve(arr);\r\n        } else {\r\n          alert('程序错误');\r\n        }\r\n        // 请求成功\r\n      }).catch((error) => {\r\n        // 请求失败，\r\n        console.log(error);\r\n      });\r\n    })\r\n  }\r\n\r\n  const scrollBottom = () => {\r\n    if (!list_container_id.current) {\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      list_container_id.current.scrollTop = list_container_id.current.scrollHeight\r\n    }, 0);\r\n  }\r\n\r\n  const updateScroll = useCallback(() => {\r\n    scrollBottom()\r\n  })\r\n\r\n  const addStreamComment = async (e) => {\r\n    if (question.trim() === '') {\r\n      alert('请输入问题');\r\n      return;\r\n    }\r\n    setQuestion('');\r\n    let index = comments.length;\r\n    let id = Math.random();\r\n    comments.push({\r\n      id,\r\n      role: 'user',\r\n      type: \"chatgpt\",\r\n      name: question,\r\n      contents: [{ index: id, text: \"\" }]\r\n    });\r\n    setComments(comments);\r\n    setCount(count + 1);\r\n    let str = \"\";\r\n    const callback = (text) => {\r\n      if (text === ENDTEXT) return;\r\n      str = str + text;\r\n      comments[index].contents[0].text = str;\r\n      setQuestion('');\r\n      setCount((count) => count + 1);\r\n    }\r\n    postStreamList(callback);\r\n  }\r\n\r\n  const renderList = () => {\r\n    return comments.length === 0 ?\r\n        (<div style={{ flex: 1 }}>\r\n          <div className='no-comment'>暂无问题，快去提问吧~</div>\r\n          <img className='chatGPTImg' src={chatgpt} />\r\n        </div>)\r\n        : (\r\n            <div\r\n                ref={(el) => {\r\n                  list_container_id.current = el;\r\n                }}\r\n                style={{ flex: 1 }}\r\n                className=\"list_container\"\r\n            >\r\n              <ul style={{ color: 'white' }}>\r\n                {comments.map((item, index) => (\r\n                    <li key={item.id} style={{ color: 'white' }}>\r\n                      {\r\n                        item.name ? (\r\n                            <div\r\n                                className='quiz'>\r\n                              <img className='quiz_avatar' src={user} />\r\n                              <div className='response' style={{ marginLeft: 8 }}>提问： {item.name}</div>\r\n                            </div>\r\n                        ) : null\r\n                      }\r\n                      {\r\n                        item.contents.length ? (\r\n                            <>\r\n                              <div\r\n                                  className='answer'>\r\n                                <img className='quiz_avatar' src={chatgpt} />\r\n                                <div style={{ marginLeft: 8, marginBottom: 10 }} >回答： <pre style={{ width: \"100%\" }}><OmsSyntaxHighlight textContent={item.contents[0].text} language={\"javascript\"} darkMode /></pre></div>\r\n                                {/* <ClickFingerTextBoard dataList={item.contents} index={index} updateScroll={updateScroll} /> */}\r\n                              </div>\r\n                              <div>{currentTexts.current}</div>\r\n                            </>\r\n                        ) : <div>\r\n                          <div style={{ display: 'flex', justifyContent: 'center', backgroundColor: 'black' }}><img className='heike' src={heike} /></div>\r\n                          <div className='answer2'>思考中...</div>\r\n                        </div>\r\n                      }\r\n                    </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n        )\r\n  }\r\n  const handleForm = (e) => {\r\n    setQuestion(e.target.value)\r\n  }\r\n\r\n\r\n  // componentDidUpdate() {\r\n  //   this.scrollBottom()\r\n  // }\r\n  useEffect(() => {\r\n    scrollBottom()\r\n  })\r\n\r\n  // const { question } = this.state;\r\n  return (\r\n      <div className='app_container'>\r\n        {renderList()}\r\n        <div className='input_style'>\r\n          <input\r\n              className='input_quertion'\r\n              type=\"text\"\r\n              placeholder=\"请输入问题\"\r\n              value={question}\r\n              name=\"question\"\r\n              onChange={handleForm}\r\n          />\r\n          <div style={{ width: '1vw' }}></div>\r\n          <button onClick={() => {\r\n            const pattern = /(http|https):\\/\\/([\\w.]+\\/?)\\S*/;\r\n            if (pattern.test(question)) {\r\n              addComment();\r\n            } else {\r\n              addStreamComment();\r\n            }\r\n          }} className=\"confirm_button\">发起提问</button>\r\n        </div>\r\n      </div>\r\n  )\r\n\r\n}\r\n\r\nconst ClickFingerTextBoard = React.memo(({ dataList, index, updateScroll }) => {\r\n  const [list, setList] = useState(dataList);\r\n  const [isALL, setIsAll] = useState(false);\r\n  let innerAllText = useRef([]);\r\n\r\n\r\n  const delay = (time) => {\r\n    return new Promise((resolve) => {\r\n      let timers = setInterval(() => {\r\n        clearInterval(timers);\r\n        resolve();\r\n      }, time);\r\n    })\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n  }, [dataList])\r\n\r\n  useEffect(() => {\r\n    const calculatedFigures = async () => {\r\n      list.map((item) => {\r\n        innerAllText.current.push(item.text);\r\n      })\r\n    }\r\n    calculatedFigures();\r\n    setIsAll(true);\r\n  }, [])\r\n\r\n\r\n  return (\r\n      <div style={{ position: 'relative', width: \"100%\" }}>\r\n        <div>\r\n          {\r\n              isALL && innerAllText.current.length && innerAllText.current.map((text, index) => {\r\n                return <div style={{ marginLeft: 8, marginBottom: 10 }} key={index}>回答： <pre style={{ width: \"100%\" }}></pre></div>\r\n              })\r\n          }\r\n        </div>\r\n\r\n      </div>\r\n  )\r\n})\r\nconst OmsSyntaxHighlight = (props) => {\r\n  const { textContent, darkMode, language = 'txt' } = props;\r\n  const [value, setValue] = useState(textContent);\r\n  if (typeof darkMode === 'undefined') {\r\n    them.light = darcula;\r\n  }\r\n  if (typeof darkMode === 'boolean') {\r\n    them.light = coyWithoutShadows;\r\n  }\r\n  useEffect(() => {\r\n    SyntaxHighlighter.registerLanguage(\"jsx\", jsx);\r\n    SyntaxHighlighter.registerLanguage(\"javascript\", javascript);\r\n    SyntaxHighlighter.registerLanguage(\"js\", javascript);\r\n  }, []);\r\n  return (\r\n      <ReactMarkdown source={value} escapeHtml={false} language={language}>{textContent}</ReactMarkdown>\r\n  );\r\n};\r\n","import axios from 'axios';\r\nclass People {\r\n    constructor(name, age, gender, hometown, occupation) {\r\n        this.name = name;\r\n        this.age = age;\r\n        this.gender = gender;\r\n        this.hometown = hometown;\r\n        this.occupation = occupation;\r\n        this.list = [];\r\n        this.addPerson({ name: \"Cathy\", age: 25, gender: \"female\", hometown: \"Guangzhou\", occupation: \"teacher\" });\r\n        this.addPerson({ name: \"David\", age: 28, gender: \"male\", hometown: \"Chengdu\", occupation: \"designer\" });\r\n        this.addPerson({ name: \"Emily\", age: 31, gender: \"female\", hometown: \"Hangzhou\", occupation: \"writer\" });\r\n        this.addPerson({ name: \"Frank\", age: 37, gender: \"male\", hometown: \"Suzhou\", occupation: \"entrepreneur\" });\r\n        this.addPerson({ name: \"Alice\", age: 23, gender: \"female\", hometown: \"Beijing\", occupation: \"student\" });\r\n        this.addPerson({ name: \"Bob\", age: 30, gender: \"male\", hometown: \"Shanghai\", occupation: \"engineer\" });\r\n        this.addPerson({ name: \"George\", age: 22, gender: \"male\", hometown: \"Wuhan\", occupation: \"student\" });\r\n        this.addPerson({ name: \"Helen\", age: 29, gender: \"female\", hometown: \"Tianjin\", occupation: \"doctor\" });\r\n        this.addPerson({ name: \"Isaac\", age: 27, gender: \"male\", hometown: \"Xian\", occupation: \"researcher\" });\r\n        this.addPerson({ name: \"Julia\", age: 33, gender: \"female\", hometown: \"Nanjing\", occupation: \"manager\" });\r\n        this.addPerson({ name: \"Kevin\", age: 26, gender: \"male\", hometown: \"Chongqing\", occupation: \"teacher\" });\r\n        this.addPerson({ name: \"Lily\", age: 24, gender: \"female\", hometown: \"Shenzhen\", occupation: \"engineer\" });\r\n        this.addPerson({ name: \"Mike\", age: 30, gender: \"male\", hometown: \"Qingdao\", occupation: \"entrepreneur\" });\r\n        this.addPerson({ name: \"Nancy\", age: 28, gender: \"female\", hometown: \"Zhengzhou\", occupation: \"designer\" });\r\n        this.addPerson({ name: \"Oscar\", age: 35, gender: \"male\", hometown: \"Ningbo\", occupation: \"writer\" });\r\n        this.addPerson({ name: \"Penny\", age: 27, gender: \"female\", hometown: \"Changsha\", occupation: \"student\" });\r\n        this.addPerson({ name: \"Quincy\", age: 29, gender: \"male\", hometown: \"Fuzhou\", occupation: \"teacher\" });\r\n        this.addPerson({ name: \"Rose\", age: 32, gender: \"female\", hometown: \"Shijiazhuang\", occupation: \"doctor\" });\r\n        this.addPerson({ name: \"Simon\", age: 36, gender: \"male\", hometown: \"Wuxi\", occupation: \"researcher\" });\r\n        this.addPerson({ name: \"Tina\", age: 31, gender: \"female\", hometown: \"Changchun\", occupation: \"manager\" });\r\n        this.addPerson({ name: \"Vincent\", age: 34, gender: \"male\", hometown: \"Harbin\", occupation: \"designer\" });\r\n        this.addPerson({ name: \"Wendy\", age: 26, gender: \"female\", hometown: \"Foshan\", occupation: \"manager\" });\r\n        this.addPerson({ name: \"Xavier\", age: 28, gender: \"male\", hometown: \"Yangzhou\", occupation: \"entrepreneur\" });\r\n        this.addPerson({ name: \"Yvonne\", age: 33, gender: \"female\", hometown: \"Jinan\", occupation: \"teacher\" });\r\n        this.addPerson({ name: \"Zack\", age: 30, gender: \"male\", hometown: \"Zhuhai\", occupation: \"writer\" });\r\n        this.addPerson({ name: \"Alice\", age: 29, gender: \"female\", hometown: \"Haikou\", occupation: \"doctor\" });\r\n    }\r\n\r\n\r\n    addPerson(person) {\r\n        this.list.push(person);\r\n    }\r\n\r\n    removePerson(person) {\r\n        const index = this.list.findIndex((p) => p.name.toLowerCase() === person.name.toLowerCase());\r\n        if (index !== -1) {\r\n            this.list.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    findPerson(person) {\r\n        if (person.name === \"\") {\r\n            return this.list;\r\n        }\r\n        return this.list.filter((p) => p.name.toLowerCase() === person.name.toLowerCase());\r\n    }\r\n\r\n    updatePerson(person) {\r\n        const index = this.list.findIndex((p) => p.name.toLowerCase() === person.name.toLowerCase());\r\n        if (index !== -1) {\r\n            this.list[index] = {\r\n                ...this.list[index],\r\n                ...person\r\n            };\r\n        }\r\n    }\r\n\r\n    updateAllPerson(attr, callback) {\r\n        let arr = this.list.map((item) => {\r\n            return {\r\n                ...item,\r\n                ...attr\r\n            }\r\n        });\r\n        this.list = arr;\r\n        console.log(\"arr\", arr);\r\n        if (callback) callback(arr);\r\n    }\r\n\r\n    getMemory() {\r\n        return [\r\n            {\r\n                content: \"我有一个系统处理人物信息 我有json格式数据是一个数组，数组每一项格式如：person: { \\\"name姓名\\\": \\\"Cathy\\\", \\\"age年龄\\\": 25, \\\"gender性别\\\": \\\"female\\\", \\\"hometown家乡\\\": \\\"Guangzhou\\\", \\\"occupation职业\\\": \\\"teacher\\\" }。 我有四个方法 addPerson(person)新增人物;removePerson(person)传入person对象里面依据name删除人物;findPerson(person)根据persion对象的name查询人物;updatePerson(person)传入person对象里面根据name查询人物;updateAllPerson(person)传入属性，可以修改全部人的属性，例如传入{\\\"age\\\": 25},所有的人年龄都修改成25。 下面我给你指令，请你调用适当的方法，传入适当的参数帮助我操作系统。 例如：我说：帮我删除名字为david的人，你就返回指令：@{\\\"methods\\\":\\\"removePerson\\\",\\\"data\\\":{\\\"name\\\":\\\"david\\\"}}@;每条指令只能操作一个人物，你可以返回多条指令;是否明白\",\r\n                role: \"user\",\r\n            },\r\n            {\r\n                content: \"明白了。以下是根据您的指令给出的操作：帮我新增一个人，名字叫做Tom，年龄为30，性别为male，家乡为Shanghai，职业为engineer。\" +\r\n                    \"返回指令：帮我新增一个人，名字叫做Tom，年龄为30，性别为male，家乡为Shanghai，职业为engineer。\" +\r\n                    \"返回指令：@{\\\"methods\\\":\\\"addPerson\\\",\\\"data\\\":{\\\"name\\\":\\\"Tom\\\",\\\"age\\\":30,\\\"gender\\\":\\\"male\\\",\\\"hometown\\\":\\\"Shanghai\\\",\\\"occupation\\\":\\\"engineer\\\"}}@\" +\r\n                    \"帮我删除名字为Cathy的人。\" +\r\n                    \"返回指令：@{\\\"methods\\\":\\\"removePerson\\\",\\\"data\\\":{\\\"name\\\":\\\"Cathy\\\"}}@\" +\r\n                    \"帮我查找名字为John的人。\" +\r\n                    \"返回指令：@{\\\"methods\\\":\\\"findPerson\\\",\\\"data\\\":{\\\"name\\\":\\\"John\\\"}}@\" +\r\n                    \"帮我更新名字为Lucy的人的信息，把家乡改为Beijing，职业改为doctor。\" +\r\n                    \"返回指令：@{\\\"methods\\\":\\\"updatePerson\\\",\\\"data\\\":{\\\"name\\\":\\\"Lucy\\\",\\\"hometown\\\":\\\"Beijing\\\",\\\"occupation\\\":\\\"doctor\\\"}}@\",\r\n                role: \"assistant\"\r\n            }\r\n        ]\r\n    }\r\n\r\n    async toChatGPT(question, callback) {\r\n        let str = await this.getList(question, callback);\r\n        this.action(str, callback);\r\n    }\r\n\r\n    getList = (question, callback) => {\r\n        return new Promise((resolve) => {\r\n            axios.post('/search/send', {\r\n                message: [\r\n                    ...this.getMemory(),\r\n                    {\r\n                        content: question,\r\n                        role: \"user\"\r\n                    }\r\n                ],\r\n            }).then((response) => {\r\n                // 请求成功\r\n                resolve(response.data.choices[0].message.content);\r\n            }).catch((error) => {\r\n                // 请求失败，\r\n                callback({\r\n                    result: true,\r\n                    response: \"程序错误，请重新请求\"\r\n                });\r\n                console.log(error);\r\n            });\r\n        })\r\n    }\r\n\r\n    action = (str, callback) => {\r\n        const match = str.match(/@(.*?)@/g);\r\n        if (match.length) {\r\n            match.map((gptOrder) => {\r\n                const match = gptOrder.match(/@(.*?)@/);\r\n                const result = match ? match[1] : null;\r\n                let json = JSON.parse(result);\r\n                this[json.methods](json.data);\r\n            });\r\n            callback({\r\n                result: true,\r\n                response: \"操作成功\"\r\n            });\r\n        } else {\r\n            // 记录下系统识别不到，但有可能许多用户都使用的问题提示词\r\n            callback({\r\n                result: false,\r\n                response: str\r\n            });\r\n        }\r\n    }\r\n}\r\nexport default People;","\r\nimport React, { useContext, useState, useCallback, useRef, useEffect } from 'react';\r\nimport './index.css';\r\nimport People from \"./People\";\r\n\r\n\r\nimport { Space, Table, Drawer, Form, Input, Button, message } from 'antd';\r\nconst { Search } = Input;\r\nconst { TextArea } = Input;\r\n\r\n\r\nconst App = () => {\r\n  const people = useRef(new People());\r\n  const [messageApi, contextHolder] = message.useMessage();\r\n  const key = 'updatable';\r\n  const [actionType, setActionType] = useState(false);\r\n  const [textAreaValue, setTextAreaValue] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n  const [list, setList] = useState([]);\r\n\r\n  const [initialValues, setInitialValues] = useState({});\r\n  useEffect(() => {\r\n    setList(people.current.list);\r\n  }, []);\r\n  const success = () => {\r\n    messageApi.open({\r\n      key,\r\n      type: 'loading',\r\n      content: 'ChatGPT Loading ...',\r\n      duration: 10\r\n    });\r\n  };\r\n  const onFinish = (values) => {\r\n    setInitialValues({});\r\n    if (actionType === \"update\") {\r\n      people.current.updatePerson(values);\r\n      setOpen(false);\r\n      setList(JSON.parse(JSON.stringify(people.current.list)));\r\n    } else {\r\n      people.current.addPerson(values);\r\n      setOpen(false);\r\n      setList(JSON.parse(JSON.stringify(people.current.list)));\r\n    }\r\n  }\r\n  const getTable = () => {\r\n    const columns = [\r\n      {\r\n        title: '姓名',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n      },\r\n      {\r\n        title: '年龄',\r\n        dataIndex: 'age',\r\n        key: 'age',\r\n      },\r\n      {\r\n        title: '性别',\r\n        dataIndex: 'gender',\r\n        key: 'gender',\r\n      },\r\n      {\r\n        title: '老家',\r\n        dataIndex: 'hometown',\r\n        key: 'hometown',\r\n      },\r\n      {\r\n        title: '职业',\r\n        dataIndex: 'occupation',\r\n        key: 'occupation',\r\n      },\r\n      {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (_, record) => (\r\n          <Space size=\"middle\">\r\n            <a onClick={() => {\r\n              setOpen(true);\r\n              setInitialValues(record);\r\n              setActionType(\"update\");\r\n            }}>edit</a>\r\n            <a onClick={() => {\r\n              people.current.removePerson(record);\r\n              setList(JSON.parse(JSON.stringify(people.current.list)));\r\n            }}>delete</a>\r\n          </Space>\r\n        ),\r\n      },\r\n    ];\r\n    const onSearch = (value) => {\r\n      setList(JSON.parse(JSON.stringify(people.current.findPerson(value))));\r\n    }\r\n    // useEffect(() => {\r\n    //   success();\r\n    // }, [open])\r\n    return (\r\n      <div style={{ padding: 20 }}>\r\n        {contextHolder}\r\n        <Button style={{ marginRight: 10 }} type=\"primary\" onClick={() => {\r\n          setInitialValues(() => { });\r\n          setOpen(true);\r\n          setActionType(\"add\");\r\n        }}>\r\n          News\r\n        </Button>\r\n        <Search style={{ marginLeft: 20 }} placeholder=\"input search text\" onSearch={onSearch} style={{ width: 200 }} />\r\n        <Button style={{ marginRight: 10 }} type=\"primary\" onClick={() => {\r\n          success();\r\n          people.current.toChatGPT(textAreaValue, (result) => {\r\n            if (result.result) {\r\n              messageApi.open({\r\n                key,\r\n                type: 'success',\r\n                content: result.response,\r\n                duration: 2,\r\n              });\r\n              setList(JSON.parse(JSON.stringify(people.current.list)));\r\n            } else {\r\n              messageApi.open({\r\n                key,\r\n                type: 'fail',\r\n                content: result.response,\r\n                duration: 2,\r\n              });\r\n            }\r\n          });\r\n        }}>\r\n          提问\r\n        </Button>\r\n        <div style={{ marginTop: 10 }}>\r\n          <TextArea\r\n            placeholder='你可以要求chatgpt帮助你完成某些内容'\r\n            onChange={(e) => {\r\n              setTextAreaValue(e.target.value)\r\n            }}\r\n          />\r\n\r\n        </div>\r\n\r\n        <Table dataSource={list} columns={columns} />\r\n        <Drawer\r\n          onClose={() => { setOpen(false); }}\r\n          title=\"Basic Drawer\" placement=\"right\" open={open}>\r\n          {\r\n            open ? (\r\n              <Form\r\n                name=\"basic\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 16 }}\r\n                style={{ maxWidth: 600 }}\r\n                initialValues={initialValues}\r\n                onFinish={onFinish}\r\n                autoComplete=\"off\"\r\n              >\r\n                <Form.Item\r\n                  label=\"name\"\r\n                  name=\"name\"\r\n                >\r\n                  <Input disabled={actionType === \"add\" ? false : true} />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label=\"age\"\r\n                  name=\"age\"\r\n                >\r\n                  <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label=\"gender\"\r\n                  name=\"gender\"\r\n                >\r\n                  <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label=\"hometown\"\r\n                  name=\"hometown\"\r\n                >\r\n                  <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label=\"occupation\"\r\n                  name=\"occupation\"\r\n                >\r\n                  <Input />\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                  <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                  </Button>\r\n                </Form.Item>\r\n              </Form>\r\n            ) : null\r\n          }\r\n        </Drawer>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  return (\r\n    <div>\r\n      {getTable()}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App;","\r\nimport React, { useContext, useState, useCallback, useRef, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Space, Table, Drawer, Form, Input, Button, message } from 'antd';\r\nconst { Search } = Input;\r\nconst { TextArea } = Input;\r\n\r\n\r\nconst App = () => {\r\n  const [textAreaValue, setTextAreaValue] = useState(\"帮我用java写一个简单的四则运算的计算器\");\r\n  const [messageApi, contextHolder] = message.useMessage();\r\n  const key = 'updatable';\r\n  const cmdRequest = (json) => {\r\n    console.log(\"json\", json)\r\n    return new Promise((resolve) => {\r\n      axios.post('http://localhost:8084/new/create', {\r\n        className: json.className,\r\n        programString: json.programString\r\n      }).then((response) => {\r\n        // 请求成功\r\n        console.log(\"请求成功\")\r\n      })\r\n    })\r\n  }\r\n\r\n  const getList = () => {\r\n    return new Promise((resolve) => {\r\n      axios.post('/search/send', {\r\n        message: [\r\n          {\r\n            content: `\r\n              我将会写个程序，功能是执行你返回的回答中存在的代码，所以我现在要训练你，程序的功能是截取你回答我的问题中的字符中识别其中的Java代码字符，\r\n              放到文件当中，所以我需要java代码的文件名以及Java代码，Java代码文件名和类名一致，所以我需要你在java代码字符的开始和结束加上标记符号，\r\n              如开始的时候加上@start，结束的时候加上@end，Java文件名前面加上，^结束加上^，后面你的任何一次回答中，\r\n              都必须给代码块和文件名加上标记符号，因为我是程序识别的你的回答，不是人工获取你的代码，你回答不包含标记符号的话，我就无法识别code。\r\n              在你给出的代码当中，请记得把所有代码的依赖都加到你给我的代码中去，例如需要import的包都加到你给我的代码中去。${textAreaValue},按照给出的格式输出文件名和代码。\r\n            `,\r\n            role: \"user\"\r\n          }\r\n        ],\r\n      }).then((response) => {\r\n        // 请求成功\r\n        resolve();\r\n        let json = action(response.data.choices[0].message.content);\r\n        cmdRequest(json);\r\n      })\r\n    })\r\n  }\r\n\r\n  const action = (str) => {\r\n    var arr = str.split('^');\r\n    var filename = arr[1].substring(0, arr[1].length);\r\n    console.log(\"filename\", filename)\r\n    const index1 = str.indexOf('@start');\r\n    const index2 = str.lastIndexOf('@end');\r\n    let code = str.substring(index1 + 6, index2);\r\n    let regex = /\\^[^\\^]+\\^/g; // 匹配^及之间的字符\r\n    code = code.replace(regex, ''); // 将匹配到的字符替换成^\r\n    // code = code.replace(new RegExp(\"\\^\" + filename + \"^\", 'g'), \"\");\r\n    console.log(\"code\", code)\r\n    messageApi.open({\r\n      key,\r\n      type: 'success',\r\n      content: 'Waiting Application Open',\r\n      duration: 30\r\n    });\r\n    return {\r\n      className: filename,\r\n      programString: code\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {contextHolder}\r\n      <div style={{ padding: 20 }}>\r\n        <Button style={{ marginRight: 10 }} type=\"primary\" onClick={() => {\r\n          messageApi.open({\r\n            key,\r\n            type: 'loading',\r\n            content: 'ChatGPT Loading ...',\r\n            duration: 30\r\n          });\r\n          getList();\r\n        }}>\r\n          执行\r\n        </Button>\r\n        <div style={{ marginTop: 10 }}>\r\n          <TextArea\r\n            value={textAreaValue}\r\n            placeholder='你可以要求chatgpt帮助你完成某些内容'\r\n            onChange={(e) => {\r\n              setTextAreaValue(e.target.value)\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App;","import React from \"react\";\nimport \"./App.css\";\nimport config from \"./config/config\";\n\nimport Chatgpt from \"./compoments/ChatGPT\";\nimport Admin from \"./compoments/Admin/index.js\";\nimport AutoCode from \"./compoments/AutoCode/index\";\nimport { useState } from \"react\";\nconst pageRouter = {\n  changeRoute: () => { },\n};\n// export const PageRouterContext = React.createContext(pageRouter);\n\nfunction App() {\n  const [target, setTaget] = useState({ id: \"\", data: {} });\n  const changeRoute = (route) => {\n    setTaget((target) => ({\n      ...route,\n    }));\n  };\n\n  const getParams = (url = window.location.href) => {\n    const theRequest = {};\n    if (url.indexOf('?') !== -1) {\n      const str = url.split('?')[1];\n      const strs = str.split('&');\n      for (let i = 0; i < strs.length; i += 1) {\n        theRequest[strs[i].split('=')[0]] = decodeURI(strs[i].split('=')[1]);\n      }\n    }\n    return theRequest;\n  }\n\n  let Compoment = <div>...</div>;\n  const setPage = () => {\n    const params = getParams();\n    console.log(\"params\", params)\n\n    if (params.admin) {\n      Compoment = <Admin />;\n      return;\n    }\n    else if(params.auto){\n      Compoment = <AutoCode />;\n      return;\n    }\n    else {\n      Compoment = <Chatgpt />;\n      return;\n    }\n  };\n\n  setPage();\n  console.log(\"111\")\n  return Compoment;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'antd/dist/reset.css';\n// import \"antd/dist/antd.css\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}