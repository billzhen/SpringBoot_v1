{"version":3,"sources":["compoments/ChatGPT/chatgpt.png","compoments/ChatGPT/user.png","compoments/ChatGPT/heike.gif","compoments/ChatGPT/qiu.gif","compoments/ChatGPT/jushou.gif","compoments/ChatGPT/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","App1","useState","comments","setComments","userName","setUserName","list_container_id","useRef","count","setCount","getList","title","Promise","resolve","axios","post","frequency_penalty","max_tokens","model","presence_penalty","message","temperature","top_p","then","response","Array","isArray","data","choices","console","log","arr","map","item","index","text","content","alert","catch","error","scrollBottom","current","setTimeout","scrollTop","scrollHeight","updateScroll","useCallback","addComment","e","a","trim","length","push","id","Math","random","name","contents","responseList","useEffect","className","src","chatgpt","ref","el","style","color","key","user","marginLeft","ClickFingerTextBoard","dataList","heike","height","type","placeholder","value","onChange","target","width","onClick","React","memo","list","isALL","setIsAll","innerText","isNeedScrollDown","innerAllText","newList","timer1","timer2","delay","time","timers","setInterval","clearInterval","calculatedFigures","split","i","j","undefined","clearTimeout","position","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,6GCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,kNCW5B,SAASC,IAAQ,IAAD,EACGC,mBAAS,IADZ,mBACtBC,EADsB,KACZC,EADY,OAEGF,mBAAS,IAFZ,mBAEtBG,EAFsB,KAEZC,EAFY,KAGvBC,EAAoBC,iBAAO,MAHJ,EAIHN,mBAAS,GAJN,mBAItBO,EAJsB,KAIfC,EAJe,KAMvBC,EAAU,SAACC,GACf,OAAO,IAAIC,SAAQ,SAACC,GAClBC,IAAMC,KAAK,eAAgB,CACzBC,kBAAmB,EACnBC,WAAY,KACZC,MAAO,mBACPC,iBAAkB,EAClBC,QAAST,EACTU,YAAa,GACbC,MAAO,IACNC,MAAK,SAACC,GACP,GAAIC,MAAMC,QAAQF,EAASG,KAAKC,SAAU,CACxCC,QAAQC,IAAI,2BAAQN,GACpB,IAAIO,EAAMP,EAASG,KAAKC,QAAQI,KAAI,SAACC,GACnC,MAAO,CACLC,MAAOD,EAAKC,MACZC,KAAMF,EAAKb,QAAQgB,YAGvBvB,EAAQkB,QAERM,MAAM,+BAGPC,OAAM,SAACC,GAERV,QAAQC,IAAIS,UAIZC,EAAe,WACdlC,EAAkBmC,SAGvBC,YAAW,WACTpC,EAAkBmC,QAAQE,UAAYrC,EAAkBmC,QAAQG,eAC/D,IAGCC,EAAeC,uBAAY,WAC/BN,OAGIO,EAAU,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACO,KAApB7C,EAAS8C,OADI,uBAEfb,MAAM,kCAFS,0BAKjBhC,EAAY,IACR6B,EAAQhC,EAASiD,OACrBjD,EAASkD,KAAK,CACZC,GAAIC,KAAKC,SACTC,KAAMpD,EACNqD,SAAU,KAEZtD,EAAYD,GACZO,EAASD,EAAQ,GACjBkC,WAAU,sBAAC,4BAAAO,EAAA,sEACgBvC,EAAQN,GADxB,OACLsD,EADK,OAETxD,EAASgC,GAAOuB,SAAWC,EAC3BvD,EAAYD,GACZG,EAAY,IACZI,EAAS,GALA,2CAMR,GApBc,2CAAH,sDAwBhBoB,QAAQC,IAAI,sBAAuB5B,GA8DnC,OANAyD,qBAAU,WACRnB,OAEFX,QAAQC,IAAI,gBAIV,yBAAK8B,UAAU,iBA7DY,IAApB1D,EAASiD,OACb,6BAAK,yBAAKS,UAAU,cAAf,iEACF,yBAAKA,UAAU,aAAaC,IAAKC,OAGnC,yBACEC,IAAK,SAACC,GACJ1D,EAAkBmC,QAAUuB,GAG9BJ,UAAU,kBAEV,wBAAIK,MAAO,CAAEC,MAAO,UACjBhE,EAAS8B,KAAI,SAACC,EAAMC,GAAP,OACZ,wBAAIiC,IAAKlC,EAAKoB,GAAIY,MAAO,CAAEC,MAAO,UAE9BjC,EAAKuB,KACH,yBACEI,UAAU,QACV,yBAAKA,UAAU,cAAcC,IAAKO,MAClC,0BAAMH,MAAO,CAAEI,WAAY,IAA3B,sBAAqCpC,EAAKuB,OAG1C,KAGJvB,EAAKwB,SAASN,OACZ,yBACES,UAAU,UACV,yBAAKA,UAAU,cAAcC,IAAKC,MAClC,kBAACQ,EAAD,CAAsBC,SAAUtC,EAAKwB,SAAUvB,MAAOA,EAAOW,aAAcA,KAE3E,6BACF,yBAAKe,UAAU,QAAQC,IAAKW,MAC5B,yBAAKZ,UAAU,WAAf,8BAKR,wBAAIK,MAAO,CAAEC,MAAO,QAASO,OAAQ,SAwB3C,yBAAKb,UAAU,eACb,2BACEA,UAAU,iBACVc,KAAK,OACLC,YAAY,iCACZC,MAAOxE,EACPoD,KAAK,WACLqB,SAxBW,SAAC7B,GAClB3C,EAAY2C,EAAE8B,OAAOF,UAyBjB,yBAAKX,MAAO,CAAEc,MAAO,QACrB,4BAAQC,QAASjC,EAAYa,UAAU,kBAAvC,8BAOR,IAAMU,EAAuBW,IAAMC,MAAK,YAAwC,IAArCX,EAAoC,EAApCA,SAAUrC,EAA0B,EAA1BA,MAAOW,EAAmB,EAAnBA,aAC1DhB,QAAQC,IAAI,2BAASI,EAAQ,gBADgD,MAErDjC,mBAASsE,GAF4C,mBAEtEY,EAFsE,aAGnDlF,mBAAS,IAH0C,mBAG/DQ,GAH+D,aAInDR,oBAAS,GAJ0C,mBAItEmF,EAJsE,KAI/DC,EAJ+D,KAKzEC,EAAY/E,iBAAO,IACnBgF,EAAmBhF,kBAAO,GAC1BiF,EAAejF,iBAAO,IACtBkF,EAAUlF,iBAAO,IACjBmF,EAASnF,iBAAO,MAChBoF,EAASpF,iBAAO,MAEdqF,EAAQ,SAACC,GACb,OAAO,IAAIjF,SAAQ,SAACC,GAClB,IAAIiF,EAASC,aAAY,WACvBC,cAAcF,GACdjF,MACCgF,OAKPlC,qBAAU,YACe,uCAAG,sBAAAV,EAAA,sDACxBkC,EAAKnD,KAAI,SAACC,GACRuD,EAAa/C,QAAQW,KAAKnB,EAAKE,SAFT,2CAAH,qDAKvB8D,KACC,IAGHtC,qBAAU,WACR9B,QAAQC,IAAI,yBAAiBI,EAAQ,gBACrC,IAAM+D,EAAiB,uCAAG,sBAAAhD,EAAA,sDACxBkC,EAAKnD,KAAI,SAACC,GACRwD,EAAQhD,QAAQW,KAAKnB,EAAKE,KAAK+D,MAAM,QAEvCR,EAAOjD,QAAUC,WAAU,sBAAC,8BAAAO,EAAA,sDACjBkD,EAAI,EADa,YACVA,EAAIV,EAAQhD,QAAQU,QADV,iBAExBmC,EAAU7C,QAAQW,KAAK,IACdgD,EAAI,EAHW,YAGRA,GAAKX,EAAQhD,QAAQ0D,GAAGhD,QAHhB,yBAIQkD,IAA1BZ,EAAQhD,QAAQ0D,GAAGC,GAJD,sEAOhBR,EAAsB,IAAhBtC,KAAKC,UAPK,OAQtB+B,EAAU7C,QAAQ0D,GAAKb,EAAU7C,QAAQ0D,GAAKV,EAAQhD,QAAQ0D,GAAGC,GAC9Db,EAAiB9C,SAClBI,IAVoB,QAGwBuD,IAHxB,uBACkBD,IADlB,uBAc1BzD,YAAW,WACT4D,aAAaZ,EAAOjD,SACpBuD,cAAcL,EAAOlD,WACpB,KAjBuB,4CAkBzB,GAtBqB,2CAAH,qDA+BvB,OANI0C,GAAQA,EAAKhC,SACf8C,IACAN,EAAOlD,QAAUsD,aAAY,WAC3BtF,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC3B,MAEE,WACL8F,aAAaZ,EAAOjD,SACpBuD,cAAcL,EAAOlD,YAEtB,IAUH,OADAZ,QAAQC,IAAI,QAEV,yBAAKmC,MAAO,CAAEsC,SAAU,WAAYxB,MAAO,SACzC,yBAAKd,MAAO,CAAEc,MAAO,KAArB,IAA4B,4BAAQC,QAAS,WAT/CsB,aAAaZ,EAAOjD,SACpBuD,cAAcL,EAAOlD,SACrB8C,EAAiB9C,SAAU,EAC3BC,WAAWG,IAAe,GAC1BwC,GAAS,IAKqEzB,UAAU,eAA1D,iBAC5B,8BAEKwB,GAASE,EAAU7C,QAAQU,QAAUmC,EAAU7C,QAAQT,KAAI,SAACG,EAAMD,GACjE,OAAO,yBAAK+B,MAAO,CAAEI,WAAY,EAAGmC,aAAc,IAAMrC,IAAKjC,GAAtD,sBAAiE,yBAAK+B,MAAO,CAAEc,MAAO,SAAW5C,QAI9G,6BAEIiD,GAASI,EAAa/C,QAAQU,QAAUqC,EAAa/C,QAAQT,KAAI,SAACG,EAAMD,GACtE,OAAO,yBAAK+B,MAAO,CAAEI,WAAY,EAAGmC,aAAc,IAAMrC,IAAKjC,GAAtD,sBAAiE,yBAAK+B,MAAO,CAAEc,MAAO,SAAW5C,YCtPhGsE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9F,MAAK,SAAA+F,GACJA,EAAaC,gBAEdjF,OAAM,SAAAC,GACLV,QAAQU,MAAMA,EAAMnB,c","file":"static/js/main.b96b9741.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chatgpt.8b0cad56.png\";","module.exports = __webpack_public_path__ + \"static/media/user.12f71825.png\";","module.exports = __webpack_public_path__ + \"static/media/heike.729fd49e.gif\";","module.exports = __webpack_public_path__ + \"static/media/qiu.5b7b93a2.gif\";","module.exports = __webpack_public_path__ + \"static/media/jushou.a8ebfd24.gif\";","\r\nimport React, { useContext, useState, useCallback, useRef } from 'react';\r\nimport './index.css';\r\nimport chatgpt from './chatgpt.png';\r\nimport user from './user.png';\r\nimport heike from './heike.gif';\r\nimport qiu from './qiu.gif';\r\nimport jushou from './jushou.gif';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default function App1() {\r\n  const [comments, setComments] = useState([]);\r\n  const [userName, setUserName] = useState(\"\");\r\n  const list_container_id = useRef(null);\r\n  const [count, setCount] = useState(0);\r\n\r\n  const getList = (title) => {\r\n    return new Promise((resolve) => {\r\n      axios.post('/search/send', {\r\n        frequency_penalty: 0,\r\n        max_tokens: 2048,\r\n        model: \"text-davinci-003\",\r\n        presence_penalty: 0,\r\n        message: title,\r\n        temperature: 0.5,\r\n        top_p: 1\r\n      }).then((response) => {\r\n        if (Array.isArray(response.data.choices)) {\r\n          console.log('请求成功', response);\r\n          let arr = response.data.choices.map((item) => {\r\n            return {\r\n              index: item.index,\r\n              text: item.message.content\r\n            }\r\n          })\r\n          resolve(arr);\r\n        } else {\r\n          alert('程序错误');\r\n        }\r\n        // 请求成功\r\n      }).catch((error) => {\r\n        // 请求失败，\r\n        console.log(error);\r\n      });\r\n    })\r\n  }\r\n  const scrollBottom = () => {\r\n    if (!list_container_id.current) {\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      list_container_id.current.scrollTop = list_container_id.current.scrollHeight\r\n    }, 0);\r\n  }\r\n\r\n  const updateScroll = useCallback(() => {\r\n    scrollBottom()\r\n  })\r\n\r\n  const addComment = async (e) => {\r\n    if (userName.trim() === '') {\r\n      alert('请输入问题');\r\n      return;\r\n    }\r\n    setUserName('');\r\n    let index = comments.length;\r\n    comments.push({\r\n      id: Math.random(),\r\n      name: userName,\r\n      contents: []\r\n    });\r\n    setComments(comments);\r\n    setCount(count + 1);\r\n    setTimeout(async () => {\r\n      let responseList = await getList(userName);\r\n      comments[index].contents = responseList;\r\n      setComments(comments);\r\n      setUserName('');\r\n      setCount(0);\r\n    }, 0);\r\n  }\r\n\r\n\r\n  console.log('comments ==========', comments);\r\n  const renderList = () => {\r\n    return comments.length === 0 ?\r\n      (<div><div className='no-comment'>暂无问题，快去提问吧~</div>\r\n          <img className='chatGPTImg' src={chatgpt}/>\r\n      </div>)\r\n      : (\r\n        <div\r\n          ref={(el) => {\r\n            list_container_id.current = el;\r\n          }}\r\n\r\n          className=\"list_container\"\r\n        >\r\n          <ul style={{ color: 'white' }}>\r\n            {comments.map((item, index) => (\r\n              <li key={item.id} style={{ color: 'white' }}>\r\n                {\r\n                  item.name ? (\r\n                    <div\r\n                      className='quiz'>\r\n                      <img className='quiz_avatar' src={user} />\r\n                      <span style={{ marginLeft: 8 }}>提问： {item.name}</span>\r\n\r\n                    </div>\r\n                  ) : null\r\n                }\r\n                {\r\n                  item.contents.length ? (\r\n                    <div\r\n                      className='answer'>\r\n                      <img className='quiz_avatar' src={chatgpt} />\r\n                      <ClickFingerTextBoard dataList={item.contents} index={index} updateScroll={updateScroll} />\r\n                    </div>\r\n                  ) : <div>\r\n                    <img className='heike' src={heike} />\r\n                    <div className='answer2'>思考中...</div>\r\n                  </div>\r\n                }\r\n              </li>\r\n            ))}\r\n            <li style={{ color: 'white', height: 100 }}>\r\n\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      )\r\n  }\r\n  const handleForm = (e) => {\r\n    setUserName(e.target.value)\r\n  }\r\n\r\n\r\n  // componentDidUpdate() {\r\n  //   this.scrollBottom()\r\n  // }\r\n  useEffect(() => {\r\n    scrollBottom()\r\n  })\r\n  console.log(\"Parent here.\")\r\n\r\n  // const { userName } = this.state;\r\n  return (\r\n    <div className='app_container'>\r\n      {renderList()}\r\n      <div className='input_style'>\r\n        <input\r\n          className='input_quertion'\r\n          type=\"text\"\r\n          placeholder=\"请输入问题\"\r\n          value={userName}\r\n          name=\"userName\"\r\n          onChange={handleForm}\r\n        />\r\n        <div style={{ width: '1%' }}></div>\r\n        <button onClick={addComment} className=\"confirm_button\">发起提问</button>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nconst ClickFingerTextBoard = React.memo(({ dataList, index, updateScroll }) => {\r\n  console.log('组件内部' + index + \"更新\");\r\n  const [list, setList] = useState(dataList);\r\n  const [count, setCount] = useState(1);\r\n  const [isALL, setIsAll] = useState(false);\r\n  let innerText = useRef([]);\r\n  let isNeedScrollDown = useRef(true);\r\n  let innerAllText = useRef([]);\r\n  let newList = useRef([]);\r\n  let timer1 = useRef(null)\r\n  let timer2 = useRef(null)\r\n\r\n  const delay = (time) => {\r\n    return new Promise((resolve) => {\r\n      let timers = setInterval(() => {\r\n        clearInterval(timers);\r\n        resolve();\r\n      }, time);\r\n    })\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    const calculatedFigures = async () => {\r\n      list.map((item) => {\r\n        innerAllText.current.push(item.text);\r\n      })\r\n    }\r\n    calculatedFigures();\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n    console.log('组件-useEffect' + index + \"更新\");\r\n    const calculatedFigures = async () => {\r\n      list.map((item) => {\r\n        newList.current.push(item.text.split(''));\r\n      })\r\n      timer1.current = setTimeout(async () => {\r\n        for (let i = 0; i < newList.current.length; i++) {\r\n          innerText.current.push([]);\r\n          for (let j = 0; j <= newList.current[i].length; j++) {\r\n            if (newList.current[i][j] === undefined) {\r\n              continue;\r\n            }\r\n            await delay(Math.random() * 100);\r\n            innerText.current[i] = innerText.current[i] + newList.current[i][j];\r\n            if(isNeedScrollDown.current){\r\n              updateScroll();\r\n            }\r\n          }\r\n        }\r\n        setTimeout(() => {\r\n          clearTimeout(timer1.current);\r\n          clearInterval(timer2.current);\r\n        }, 1000)\r\n      }, 0);\r\n    }\r\n\r\n    if (list && list.length) {\r\n      calculatedFigures();\r\n      timer2.current = setInterval(() => {\r\n        setCount((count) => count + 1);\r\n      }, 100)\r\n    }\r\n    return () => {\r\n      clearTimeout(timer1.current);\r\n      clearInterval(timer2.current);\r\n    }\r\n  }, [])\r\n\r\n  const textquickly = (index) => {\r\n    clearTimeout(timer1.current);\r\n    clearInterval(timer2.current);\r\n    isNeedScrollDown.current = false;\r\n    setTimeout(updateScroll(),0);\r\n    setIsAll(true);\r\n  }\r\n  console.log(\"here\");\r\n  return (\r\n    <div style={{ position: 'relative', width: \"100%\" }}>\r\n      <div style={{ width: 30 }}> <button onClick={() => { textquickly(index); }} className=\"quickButton\">加速</button></div>\r\n      <div>\r\n        {\r\n          !isALL && innerText.current.length && innerText.current.map((text, index) => {\r\n            return <div style={{ marginLeft: 8, marginBottom: 10 }} key={index}>回答： <pre style={{ width: \"100%\" }}>{text}</pre></div>\r\n          })\r\n        }\r\n      </div>\r\n      <div>\r\n        {\r\n          isALL && innerAllText.current.length && innerAllText.current.map((text, index) => {\r\n            return <div style={{ marginLeft: 8, marginBottom: 10 }} key={index}>回答： <pre style={{ width: \"100%\" }}>{text}</pre></div>\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Chatgpt from \"./compoments/ChatGPT\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chatgpt />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}