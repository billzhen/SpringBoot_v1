{"version":3,"sources":["xpyun/util/util.js","config/config.js","fetch/index.js","xpyun/index.js","compoments/CustermoInput.js","printer/index.js","compoments/Printer.js","compoments/Success.js","compoments/Welcome.js","compoments/Failed.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["getMillisecond","Date","getTime","getDateString","d","curr_date","getDate","toString","curr_month","getMonth","curr_year","getFullYear","console","log","length","generateSign","user","userKey","timestamp","signSource","crypto","createHash","update","digest","generateContext","data","a","getSN","sn","printContent","name","config","url","save","getlist","pages","home","printList","input","welcome","success","failed","xpyun","apis","getPrinter","method","printRecept","fetchRequest","opts","jsonFormat","Promise","resolve","reject","fetch","then","response","json","catch","error","postToServer","headers","body","JSON","stringify","saveResultValidation","result","getPrintListFromServer","getPrintListValidation","sleep","time","d1","parseInt","USER_NAME","USER_KEY","date","encoding","sign","debug","code","printed","PrinterData","content","copies","voice","CustermoInput","useState","setName","staff","setStaff","text","setText","process","setProcess","changeRoute","useContext","PageRouterContext","submit","staffId","navigateTo","id","type","onChange","e","target","vaFghjlue","value","onClick","printerReceipt","ip","printer","printerData","port","ePosDev","window","epson","ePOSDevice","connect","createDevice","DEVICE_TYPE_PRINTER","buffer","devobj","retcode","canvas","document","getElementById","context","getContext","addTextAlign","ALIGN_LEFT","addTextLineSpace","addTextFont","FONT_D","addImage","COLOR_1","MODE_MONO","addText","addFeed","addCut","CUT_FEED","send","stop","Printer","printeList","setPrinteList","currentJob","setCurrentJob","networkIssue","setNetworkIssue","printerIssue","setPrinterIssue","getPrintList","printerJob","staffName","toISOString","wish","stopPrint","list","array","pop","useEffect","map","key","Success","Welcome","src","Failed","retry","React","createContext","App","setTaget","Compoment","setPage","className","Provider","route","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.cec78131.chunk.js","sourcesContent":["import crypto from \"crypto\";\r\nimport { getSN } from \"..\";\r\n\r\n/**\r\n * 哈稀签名\r\n * @param signSource - 源字符串\r\n * @return\r\n */\r\nexport const sign = (signSource) => {\r\n  let signature = crypto.createHash(\"sha1\").update(signSource).digest(\"hex\");\r\n\r\n  return signature;\r\n};\r\n\r\n/**\r\n *获得毫秒数\r\n */\r\n\r\nexport const getMillisecond = () => {\r\n  return new Date().getTime();\r\n};\r\nexport const getDateString = () => {\r\n  let d = new Date();\r\n  let curr_date = d.getDate().toString();\r\n  let curr_month = (d.getMonth() + 1).toString();\r\n  let curr_year = d.getFullYear().toString();\r\n  console.log(curr_date);\r\n  console.log(curr_month);\r\n  console.log(curr_month);\r\n  if (curr_month.length < 2) {\r\n    curr_month = curr_month = \"0\" + curr_month;\r\n  }\r\n  if (curr_date.length < 2) {\r\n    curr_date = \"0\" + curr_date;\r\n  }\r\n\r\n  let yyyyMMdd = curr_year + \"-\" + curr_month + \"-\" + curr_date;\r\n  return yyyyMMdd;\r\n};\r\n\r\n/**\r\n * 获得字符串重复\r\n * @param str - 要进行重复的字符串\r\n * @param repeatTimes - 重复次数\r\n */\r\nexport const strRepeat = (str, repeatTimes) => {\r\n  let len = repeatTimes + 1;\r\n  return new Array(len).join(str);\r\n};\r\n\r\nexport const generateSign = (user, userKey, timestamp) => {\r\n  return sign(user + userKey + timestamp);\r\n};\r\n\r\nexport const generateContext = async (data) => {\r\n  let sn = await getSN();\r\n\r\n  let printContent = \"<CB>Revive & Thrive<BR>\";\r\n  printContent = printContent + \"<N><C>2023 壹.零 Annual Dinner<BR>\";\r\n  printContent = printContent + \"<BR><BR>\";\r\n  printContent = printContent + \"<N><C>欢迎\" + data.name + \",<BR>\";\r\n  printContent = printContent + \"<N><C>第\" + sn + \"个拥抱未来的壹.零er<BR>\";\r\n  printContent = printContent + \"<BR><BR>\";\r\n  printContent = printContent + \"<L><N>--------------------------------<BR>\";\r\n  printContent = printContent + \"<N><C>你的心愿<BR>\";\r\n  printContent = printContent + \"<BR><BR>\";\r\n  printContent = printContent + \"<N><C>年年既欢喜<BR>\";\r\n  printContent = printContent + \"<N><C>岁岁同喜庆<BR>\";\r\n  printContent = printContent + \"<BR><BR>\";\r\n  printContent = printContent + \"<N><R>2023年3月10日<BR>\";\r\n  printContent = printContent + \"<L><N>--------------------------------<BR>\";\r\n  printContent = printContent + \"<IMG></IMG>\";\r\n  printContent = printContent + \"<BR>\";\r\n  printContent = printContent + \"<L><N>TIPS #1 保留小票留下专属回忆<BR>\";\r\n  printContent = printContent + \"<L><N>TIPS #2 扫码进入年会相册\";\r\n  printContent = printContent + \"<C><QR>https://www.xpyun.net</QR></C>\";\r\n  // printContent = printContent + \"<L><HB>Hello: \" + data.name + \" <BR></HB>\";\r\n  // printContent = printContent + \"<C>\" + data.text + \"<BR></C>\";\r\n  // printContent =\r\n  //   printContent + \"<C><BARCODE>\" + data.staffId + \"</BARCODE></C>\";\r\n  // printContent = printContent + \"<C><QR>https://www.xpyun.net</QR></C>\";\r\n  // printContent = printContent + \"<IMG></IMG>\";\r\n  // `no element：default font<BR>\r\n  // <BR>\r\n  // L element: <L>left<BR></L>\r\n  // <BR>\r\n  // R element: <R>right<BR></R>\r\n  // <BR>\r\n  // C element: <C>center<BR></C>\r\n  // <BR>\r\n  // N element：<N>normal font size<BR></N>\r\n  // <BR>\r\n  // HB element: <HB>double font height<BR></HB>\r\n  // <BR>\r\n  // WB element: <WB>double font width<BR></WB>\r\n  // <BR>\r\n  // B element: <B>double font size<BR></B>\r\n  // <BR>\r\n  // HB2 element: <HB2>triple font height<BR></HB2>\r\n  // <BR>\r\n  // WB2 element: <WB2>triple font width<BR></WB2>\r\n  // <BR>\r\n  // B2 element: <B2>triple font size<BR></B2>\r\n  // <BR>\r\n  // BOLD element: <BOLD>bold font<BR></BOLD>`;\r\n\r\n  // printContent = printContent + \"<BR>\";\r\n  // // neseted using font and align element\r\n  // printContent =\r\n  //   printContent + \"<C>nested use:<BOLD>center bold</BOLD><BR></C>\";\r\n\r\n  // // print barcode and QR\r\n  // printContent = printContent + \"<BR>\";\r\n  // printContent = printContent + \"<C><BARCODE>9884822189</BARCODE></C>\";\r\n  //printContent = printContent + \"<C><QR>https://www.xpyun.net</QR></C>\";\r\n  return printContent;\r\n};\r\n","const config = {\r\n  url: {\r\n    save: \"http://localhost:8080/setWish\",\r\n    getlist: \"http://localhost:8080/getWish\",\r\n  },\r\n\r\n  pages: {\r\n    home: \"home\",\r\n    printList: \"printList\",\r\n    input: \"input\",\r\n    welcome: \"welcome\",\r\n    success: \"success\",\r\n    failed: \"failed\",\r\n  },\r\n\r\n  xpyun: {\r\n    apis: {\r\n      getPrinter: {\r\n        url: \"/api/openapi/ddPrinters\",\r\n        method: \"POST\",\r\n      },\r\n      printRecept: {\r\n        url: \"/api/openapi/xprinter/print\",\r\n        method: \"POST\",\r\n      },\r\n      getSN: {\r\n        url: \"/api/openapi/xprinter/queryOrderStatis\",\r\n        method: \"POST\",\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport default config;\r\n","import config from \"../config/config\";\r\n\r\nexport function fetchRequest(url, opts, jsonFormat) {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(url, opts)\r\n      .then((response) => {\r\n        console.log(response);\r\n        if (jsonFormat) {\r\n          return response.json();\r\n        } else {\r\n          return response;\r\n        }\r\n      })\r\n      .then((data) => {\r\n        console.log(data);\r\n        resolve(data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        resolve(false);\r\n      });\r\n  });\r\n}\r\n\r\nexport const postToServer = async (data) => {\r\n  let opts = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(data),\r\n  };\r\n  let result = await saveResultValidation(\r\n    await fetchRequest(config.url.save, opts, true)\r\n  );\r\n\r\n  return result;\r\n};\r\n\r\nexport const getPrintListFromServer = async () => {\r\n  let opts = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  let result = await getPrintListValidation(\r\n    await fetchRequest(config.url.getlist, opts, true)\r\n  );\r\n  return result;\r\n};\r\n\r\nexport const saveResultValidation = async (result) => {\r\n  console.log(\"saveResultValidation\");\r\n  console.log(result);\r\n\r\n  return result;\r\n};\r\n\r\nexport const getPrintListValidation = async (result) => {\r\n  console.log(\"getPrintListValidation\");\r\n  console.log(result);\r\n\r\n  return result;\r\n};\r\nexport const sleep = async (time) => {\r\n  let d1 = new Date();\r\n  console.log(parseInt(d1));\r\n  while (parseInt(new Date() - d1) < time) {\r\n    continue;\r\n  }\r\n  return \"\";\r\n};\r\n","import {\r\n  getMillisecond,\r\n  generateSign,\r\n  generateContext,\r\n  getDateString,\r\n} from \"./util/util\";\r\nimport config from \"../config/config\";\r\nimport { fetchRequest } from \"../fetch\";\r\nconst USER_NAME = \"417770773@qq.com\";\r\nconst USER_KEY = \"e442232f7e044db79041a78f6c9b65b1\";\r\nconst OK_PRINTER_SN = \"748PG68WQZ8694A\";\r\n\r\nexport const addPrinter = async () => {\r\n  let timestamp = getMillisecond();\r\n  let opts = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    json: true,\r\n    encoding: \"utf-8\",\r\n    body: JSON.stringify({\r\n      items: [\r\n        { sn: OK_PRINTER_SN, name: \"A\" },\r\n        // { sn: \"XPY987654321B\", name: \"X58B\" },\r\n        // { sn: \"XPY123456723A\", name: \"X58C\" },\r\n        // { sn: \"XPY987654345B\", name: \"X58D\" },\r\n      ],\r\n      user: USER_NAME,\r\n      timestamp: timestamp,\r\n      sign: generateSign(USER_NAME, USER_KEY, timestamp),\r\n      debug: \"0\",\r\n    }),\r\n  };\r\n  let result = await fetchRequest(config.xpyun.apis.printRecept, opts, true);\r\n\r\n  return result;\r\n};\r\n\r\nexport const getSN = async () => {\r\n  let timestamp = getMillisecond();\r\n  let date = getDateString();\r\n  console.log(date);\r\n  let opts = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    json: true,\r\n    encoding: \"utf-8\",\r\n    body: JSON.stringify({\r\n      sn: OK_PRINTER_SN,\r\n      date: date,\r\n      user: USER_NAME,\r\n      timestamp: timestamp,\r\n      sign: generateSign(USER_NAME, USER_KEY, timestamp),\r\n      debug: \"0\",\r\n    }),\r\n  };\r\n  let result = await fetchRequest(config.xpyun.apis.getSN.url, opts, true);\r\n  if (result.code === 0) {\r\n    return result.data.printed;\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport const PrinterData = async (data) => {\r\n  let timestamp = getMillisecond();\r\n  let opts = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    // mode: \"no-cors\",\r\n    json: true,\r\n    encoding: \"utf-8\",\r\n    body: JSON.stringify({\r\n      sn: OK_PRINTER_SN,\r\n      content: await generateContext(data),\r\n      copies: 1,\r\n      voice: 1,\r\n      user: USER_NAME,\r\n      timestamp: timestamp,\r\n      sign: generateSign(USER_NAME, USER_KEY, timestamp),\r\n      debug: \"0\",\r\n    }),\r\n  };\r\n  let result = await fetchRequest(\r\n    config.xpyun.apis.printRecept.url,\r\n    opts,\r\n    true\r\n  );\r\n  console.log(result);\r\n  if (result.code === 0) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport { PrinterData } from \"../xpyun/index\";\r\nimport { PageRouterContext } from \"../App\";\r\nimport config from \"../config/config\";\r\nexport default function CustermoInput() {\r\n  const [name, setName] = useState(\"\");\r\n  const [staff, setStaff] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const [printResult, setPrintResult] = useState(false);\r\n  const [process, setProcess] = useState(false);\r\n  const changeRoute = useContext(PageRouterContext);\r\n\r\n  const submit = async () => {\r\n    setProcess(true);\r\n    let result = await PrinterData({\r\n      staffId: staff,\r\n      name: name,\r\n      text: text,\r\n    });\r\n    if (result) {\r\n      navigateTo(changeRoute, config.pages.success);\r\n    } else {\r\n      navigateTo(changeRoute, config.pages.failed);\r\n    }\r\n  };\r\n\r\n  const navigateTo = (changeRoute, id) => {\r\n    changeRoute({ id: id });\r\n  };\r\n  const inputData = () => {\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          onChange={(e) => {\r\n            setText(e.target.vaFghjlue);\r\n          }}\r\n          value={text}\r\n        ></input>{\" \"}\r\n        祝福\r\n        <br></br>\r\n        <input\r\n          type=\"text\"\r\n          onChange={(e) => {\r\n            setName(e.target.value);\r\n          }}\r\n          value={name}\r\n        ></input>{\" \"}\r\n        name\r\n        <br></br>\r\n        <input\r\n          type=\"text\"\r\n          onChange={(e) => {\r\n            setStaff(e.target.value);\r\n          }}\r\n          value={staff}\r\n        ></input>{\" \"}\r\n        staff id\r\n        <br></br>\r\n        <button onClick={submit}>开始打印</button>\r\n      </div>\r\n    );\r\n  };\r\n  const processing = () => {\r\n    return <div>printing......</div>;\r\n  };\r\n\r\n  return <div>{!process ? inputData() : processing()}</div>;\r\n}\r\n","export const printerReceipt = async (data, ip) => {\r\n  console.log(data);\r\n  const port = 8043;\r\n  let error = 0;\r\n  const result = await getPrinter(ip ? ip : \"0.0.0.0\", port);\r\n  if (result.printer) {\r\n    await printerData(data, result.printer);\r\n  } else {\r\n    error = result.error;\r\n  }\r\n\r\n  return { error: error };\r\n};\r\n\r\nexport const getPrinter = async (ip, port) => {\r\n  return new Promise((resolve, reject) => {\r\n    var printer = null;\r\n    var ePosDev = new window.epson.ePOSDevice();\r\n    ePosDev.connect(ip, port, function (data) {\r\n      console.log(data);\r\n      if (data == \"OK\" || data == \"SSL_CONNECT_OK\") {\r\n        ePosDev.createDevice(\r\n          \"local_printer\",\r\n          ePosDev.DEVICE_TYPE_PRINTER,\r\n          { crypto: true, buffer: false },\r\n          function (devobj, retcode) {\r\n            if (retcode == \"ok\") {\r\n              printer = devobj;\r\n              resolve({ printer: printer });\r\n            } else {\r\n              resolve({ printer: false, error: 2 });\r\n            }\r\n          }\r\n        );\r\n      } else {\r\n        resolve({ printer: false, error: 1 });\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport const printerData = async (data, printer) => {\r\n  console.log(\"start print data\");\r\n  console.log(data);\r\n\r\n  const canvas = document.getElementById(\"canvas\");\r\n  const context = canvas.getContext(\"2d\");\r\n  printer.addTextAlign(printer.ALIGN_LEFT);\r\n  printer.addTextAlign(printer.ALIGN_LEFT);\r\n  printer.addTextLineSpace(35);\r\n  printer.addTextFont(printer.FONT_D);\r\n  if (context) {\r\n    printer.addImage(\r\n      context,\r\n      10,\r\n      10,\r\n      219,\r\n      81,\r\n      printer.COLOR_1,\r\n      printer.MODE_MONO\r\n    );\r\n  }\r\n  printer.addText(data);\r\n\r\n  printer.addFeed(1);\r\n  printer.addCut(printer.CUT_FEED);\r\n  printer.send();\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport { printerReceipt } from \"../printer\";\r\nimport { getPrintListFromServer, postToServer, sleep } from \"../fetch/index\";\r\nimport { useEffect } from \"react\";\r\nlet stop = false;\r\nexport default function Printer() {\r\n  const [printResult, setPrintResult] = useState(0);\r\n  const [process, setProcess] = useState(false);\r\n  const [printeList, setPrinteList] = useState([]);\r\n  const [currentJob, setCurrentJob] = useState(\"\");\r\n  const [networkIssue, setNetworkIssue] = useState(false);\r\n  const [printerIssue, setPrinterIssue] = useState(false);\r\n  const getPrintList = async () => {\r\n    stop = false;\r\n    setProcess(true);\r\n    setNetworkIssue(false);\r\n    setPrinterIssue(false);\r\n    let result = await getPrintListFromServer();\r\n\r\n    if (result) {\r\n      await printerJob(result);\r\n    } else {\r\n      setNetworkIssue(true);\r\n    }\r\n  };\r\n  const submit = async () => {\r\n    const result = await postToServer({\r\n      staffName: new Date().toISOString(),\r\n      staffId: \"staff\",\r\n      wish: \"text\",\r\n    });\r\n  };\r\n  const stopPrint = () => {\r\n    stop = true;\r\n  };\r\n\r\n  const printerJob = async (list) => {\r\n    console.log(list.length);\r\n    let array = list;\r\n    while (array.length > 0) {\r\n      setPrinteList([...array]);\r\n      setCurrentJob(array[array.length - 1].staffName);\r\n      let result = await printerReceipt(array[array.length - 1]);\r\n      await sleep(2000);\r\n      result = true;\r\n      if (result.error == 0) {\r\n        array.pop();\r\n        setPrinteList(array);\r\n      } else {\r\n        stop = true;\r\n        setPrinterIssue(true);\r\n        break;\r\n      }\r\n    }\r\n    if (!stop) {\r\n      await getPrintList();\r\n    }\r\n    setProcess(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    //use changed\r\n    console.log(printeList);\r\n  }, [printeList]);\r\n  const printing = () => {\r\n    return <div>job start....</div>;\r\n  };\r\n\r\n  const jobList = () => {\r\n    return (\r\n      <div>\r\n        <p>Printer Job List</p>\r\n        <ol>\r\n          {printeList.map((value, key) => {\r\n            return (\r\n              <ul>\r\n                {value.staffName}\r\n                {/* {value.wish} */}\r\n              </ul>\r\n            );\r\n          })}\r\n        </ol>\r\n        {process ? <div>current job for {currentJob}</div> : \"\"}\r\n      </div>\r\n    );\r\n  };\r\n  const getStart = () => {\r\n    return (\r\n      <div>\r\n        <form>\r\n          <button onClick={getPrintList}>start Print Job</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  };\r\n  const getStop = () => {\r\n    return (\r\n      <div>\r\n        <form>\r\n          <button onClick={stopPrint}>stop Print Job</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  };\r\n  const networkAlert = () => {\r\n    return (\r\n      <div>\r\n        <div>network issue now .............</div>\r\n      </div>\r\n    );\r\n  };\r\n  const printerAlert = () => {\r\n    return (\r\n      <div>\r\n        <div>printer issue now .............</div>\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <div>\r\n      <div>{jobList()}</div>\r\n      <div>{networkIssue ? networkAlert() : \"\"}</div>\r\n      <div>{printerIssue ? printerAlert() : \"\"}</div>\r\n      <div>{process ? printing() : getStart()}</div>\r\n      <div>{getStop()}</div>\r\n      <div>\r\n        {\r\n          <form>\r\n            <button onClick={submit}>add</button>\r\n          </form>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { PrinterData } from \"../xpyun/index\";\r\nimport { PageRouterContext } from \"../App\";\r\nimport config from \"../config/config\";\r\nexport default function Success() {\r\n  const changeRoute = useContext(PageRouterContext);\r\n\r\n  const submit = async () => {};\r\n\r\n  const navigateTo = (changeRoute, id) => {\r\n    changeRoute({ id: id });\r\n  };\r\n\r\n  return <div>success</div>;\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { addPrinter, PrinterData } from \"../xpyun/index\";\r\nimport { useEffect } from \"react\";\r\nimport config from \"../config/config\";\r\nimport { PageRouterContext } from \"../App\";\r\n\r\nexport default function Welcome() {\r\n  const changeRoute = useContext(PageRouterContext);\r\n  const navigateTo = (changeRoute, id) => {\r\n    changeRoute({ id: id });\r\n  };\r\n  const checkPlay = () => {\r\n    navigateTo(changeRoute, config.pages.input);\r\n  };\r\n  return (\r\n    <div>\r\n      <div onClick={checkPlay}>\r\n        {/* <video id=\"myVideo\" width=\"400\" height=\"800\" controls autoPlay> */}\r\n        <img src=\"/welcome.webp\" />\r\n        {/* </video> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { PrinterData } from \"../xpyun/index\";\r\nimport { PageRouterContext } from \"../App\";\r\nimport config from \"../config/config\";\r\nexport default function Failed() {\r\n  const [name, setName] = useState(\"\");\r\n  const [staff, setStaff] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const [printResult, setPrintResult] = useState(false);\r\n  const [process, setProcess] = useState(false);\r\n  const changeRoute = useContext(PageRouterContext);\r\n\r\n  const retry = async () => {\r\n    navigateTo(changeRoute, config.pages.input);\r\n  };\r\n\r\n  const navigateTo = (changeRoute, id) => {\r\n    changeRoute({ id: id });\r\n  };\r\n\r\n  const resultData = () => {\r\n    return (\r\n      <div>\r\n        <div>failed </div>\r\n        <button onClick={retry}>retry</button>\r\n      </div>\r\n    );\r\n  };\r\n  return <div> {resultData()}</div>;\r\n}\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport CustermoInput from \"./compoments/CustermoInput\";\r\nimport Printer from \"./compoments/Printer\";\r\nimport config from \"./config/config\";\r\nimport XPrinter from \"./compoments/XPrinter\";\r\nimport Success from \"./compoments/Success\";\r\nimport Welcome from \"./compoments/Welcome\";\r\nimport Failed from \"./compoments/Failed\";\r\nimport { useState } from \"react\";\r\nconst pageRouter = {\r\n  changeRoute: () => {},\r\n};\r\nexport const PageRouterContext = React.createContext(pageRouter);\r\n\r\nfunction App() {\r\n  const [target, setTaget] = useState({ id: \"\", data: {} });\r\n  const changeRoute = (route) => {\r\n    setTaget((target) => ({\r\n      ...route,\r\n    }));\r\n  };\r\n\r\n  let Compoment = null;\r\n  const setPage = () => {\r\n    console.log(target);\r\n    switch (target.id) {\r\n      case config.pages.home:\r\n        Compoment = CustermoInput;\r\n        break;\r\n      case config.pages.printList:\r\n        Compoment = Printer;\r\n        break;\r\n      case config.pages.input:\r\n        Compoment = CustermoInput;\r\n        break;\r\n      case config.pages.welcome:\r\n        Compoment = Welcome;\r\n        break;\r\n      case config.pages.success:\r\n        Compoment = Success;\r\n        break;\r\n      case config.pages.failed:\r\n        Compoment = Failed;\r\n        break;\r\n      default:\r\n        Compoment = Welcome;\r\n        break;\r\n    }\r\n  };\r\n\r\n  setPage();\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div>\r\n          <PageRouterContext.Provider value={changeRoute}>\r\n            <Compoment></Compoment>\r\n          </PageRouterContext.Provider>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}